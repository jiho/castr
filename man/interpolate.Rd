% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interpolate.R
\name{interpolate}
\alias{interpolate}
\title{Interpolate values}
\usage{
interpolate(x, y, xout, method = "linear", extrapolate = TRUE)
}
\arguments{
\item{x}{coordinate where data is avalaible.}

\item{y}{vector of values measured at points \code{x}.}

\item{xout}{vector giving the coordinates at which to interpolate.}

\item{method}{interpolation method. When \code{y} is numeric (or coercible as such), the method can be "constant", "linear", or "spline". When \code{y} is discrete (factor, character, etc.), "constant" (i.e. nearest neighbour) interpolation is always performed, no mater what is specified.}

\item{extrapolate}{when \code{TRUE}, the default, extrapolate \code{y} for values of \code{xout} outside of \code{range(x)}.}
}
\value{
The vector of interpolated values at points \code{xout}.
}
\description{
Interpolate values
}
\examples{
set.seed(1)

# interpolate numerical values
x <- jitter(1:10, 2)
y <- runif(10, 10, 100)
xout <- seq(0,11,by=0.1)
plot(x, y, type="b", xlim=c(0,11))
rug(x)
rug(xout, col="red")
points(xout, interpolate(x, y, xout, method="constant"), col="red")
points(xout, interpolate(x, y, xout, method="linear"), col="darkgreen", pch=4)
points(xout, interpolate(x, y, xout, method="spline", extrapolate=FALSE), col="blue", pch=3)

# interpolate a factor
x <- jitter(1:10, 2)
y <- factor(letters[1:2][round(runif(10, 1, 2))])
xout <- 1:10
plot(x, y, yaxt="n", ylim=c(0,3))
axis(2, at=1:2, labels=levels(y))
rug(x)
rug(xout, col="red")
points(xout, interpolate(x, y, xout, method="spline"), col="red")
}
